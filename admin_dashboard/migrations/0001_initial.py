# Generated by Django 5.1.4 on 2025-02-07 05:51

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='BlogPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='The headline of the blog post.', max_length=200, verbose_name='Title')),
                ('author', models.CharField(blank=True, help_text='The name of the blog post author.', max_length=255, null=True, verbose_name='Author')),
                ('short_description', models.TextField(blank=True, help_text='A teaser or brief description of the blog post.', null=True, verbose_name='Short Description')),
                ('content', models.TextField(blank=True, help_text='The full content of the blog post, including text, images, videos, and other media.', null=True, verbose_name='Content')),
                ('category', models.CharField(choices=[('business_achievements', 'Business Achievements'), ('tech_news', 'Tech News'), ('how_to_guides', 'How-To Guides'), ('other', 'Other')], help_text='The blog category to help organize posts.', max_length=50, verbose_name='Category')),
                ('tags', models.CharField(help_text='Keywords or phrases associated with the blog post.', max_length=200, verbose_name='Tags')),
                ('featured_image', models.ImageField(help_text='The image that will appear at the top of the blog post or as a thumbnail.', upload_to='blog_images/', verbose_name='Featured Image')),
                ('date_published', models.DateTimeField(help_text='The publication date of the blog post.', verbose_name='Date Published')),
                ('is_active', models.BooleanField(default=True, help_text='A boolean field to indicate if the blog post is currently live.', verbose_name='Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Blog Post',
                'verbose_name_plural': 'Blog Posts',
                'ordering': ['-date_published'],
            },
        ),
        migrations.CreateModel(
            name='ContactSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(max_length=20)),
                ('message', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='JobApplication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(max_length=20)),
                ('state', models.CharField(max_length=50)),
                ('position', models.CharField(max_length=100)),
                ('resume', models.FileField(upload_to='resumes/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'doc', 'docx'])])),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='JobListing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('job_title', models.CharField(help_text='Job title', max_length=255)),
                ('department', models.CharField(help_text='Department', max_length=255)),
                ('job_location', models.CharField(help_text='Office location or remote', max_length=255)),
                ('job_description', models.TextField(blank=True, help_text='Job role, responsibilities, and requirements', null=True)),
                ('qualifications', models.TextField(blank=True, help_text='Skills, experience, and education required', null=True)),
                ('application_link', models.URLField(blank=True, help_text='Link to apply for the job', max_length=500, null=True)),
                ('application_instructions', models.TextField(blank=True, help_text='How to submit an application if no link is provided', null=True)),
                ('active', models.BooleanField(default=True, help_text='Is the job listing active?')),
                ('date_posted', models.DateField(auto_now_add=True, help_text='Date posted')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='NewsArticle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='The headline or title of the news article.', max_length=200, verbose_name='Title')),
                ('short_description', models.TextField(blank=True, help_text='A brief summary of the news article.', null=True, verbose_name='Short Description')),
                ('full_content', models.TextField(blank=True, help_text='The body of the news article, which can include text, images, and videos.', null=True, verbose_name='Full Content')),
                ('is_event_news', models.BooleanField(default=False, help_text='If True, this news is related to an event.', verbose_name='Is Event News')),
                ('event_start_date', models.DateTimeField(blank=True, help_text='The start date of the event (required if this is an event news).', null=True, verbose_name='Event Start Date')),
                ('event_end_date', models.DateTimeField(blank=True, help_text='The end date of the event (required if this is an event news).', null=True, verbose_name='Event End Date')),
                ('category', models.CharField(choices=[('product_launch', 'Product Launch'), ('industry_update', 'Industry Update'), ('other', 'Other')], help_text='Category or type of news.', max_length=50, verbose_name='Category')),
                ('featured_image', models.ImageField(blank=True, help_text='The icon image representing the news article, shown as a thumbnail or preview image.', null=True, upload_to='news_icons/', verbose_name='News Icon')),
                ('date_published', models.DateTimeField(help_text='The publication date of the news article.', verbose_name='Date Published')),
                ('is_active', models.BooleanField(default=True, help_text='A boolean field to specify if the news is active (visible on the website).', verbose_name='Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'News Article',
                'verbose_name_plural': 'News Articles',
                'ordering': ['-date_published'],
            },
        ),
        migrations.CreateModel(
            name='NewsletterSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('subscribed_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='The title of the project.', max_length=200, verbose_name='Project Title')),
                ('short_description', models.TextField(blank=True, help_text='A brief summary of the project.', null=True, verbose_name='Short Description')),
                ('content', models.TextField(blank=True, help_text='Detailed information about the project, its objectives, scope, and significance.', null=True, verbose_name='Content')),
                ('category', models.CharField(blank=True, choices=[('network_infrastructure', 'Network Infrastructure'), ('cybersecurity', 'Cybersecurity'), ('cloud_solutions', 'Cloud Solutions'), ('other', 'Other')], help_text='The category the project falls under.', max_length=50, null=True, verbose_name='Project Category')),
                ('status', models.CharField(blank=True, choices=[('ongoing', 'Ongoing'), ('completed', 'Completed'), ('on_hold', 'On Hold')], default='ongoing', help_text='The current state of the project.', max_length=20, null=True, verbose_name='Project Status')),
                ('featured_image', models.ImageField(blank=True, help_text='An image that represents the project.', null=True, upload_to='project_images/', verbose_name='Featured Image')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates if the project is visible on the website.', verbose_name='Active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Project',
                'verbose_name_plural': 'Projects',
                'ordering': ['-created_at'],
            },
        ),
    ]
